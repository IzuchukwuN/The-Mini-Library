import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;

public class ListStacksQueues {

	// List for storing books
    private List<AbstractBook> bookList;

    // Stack for undo operations (e.g., undo book removal)
    private Stack<AbstractBook> undoStack;

    // Queue for managing book requests
    private Queue<BookRequest> bookRequestQueue;

     {
        bookList = new ArrayList<>();
        undoStack = new Stack<>();
        bookRequestQueue = new LinkedList<>();
    }

    // Add a book to the list
    public void addBook(AbstractBook book) {
        bookList.add(book);
        System.out.println("Book added: " + book.getTitle());
    }

    // Remove a book by ISBN and push it to the undo stack
    public void removeBook(String isbn) {
        for (AbstractBook book : bookList) {
            if (book.getISBN().equals(isbn)) {
                bookList.remove(book);
                undoStack.push(book); // Push removed book onto the stack
                System.out.println("Book removed: " + book.getTitle());
                return;
            }
        }
        System.out.println("Book not found: " + isbn);
    }

    // Undo the last book removal
    public void undoLastRemoval() {
        if (!undoStack.isEmpty()) {
            AbstractBook book = undoStack.pop(); // Pop the last removed book
            bookList.add(book); // Re-add it to the list
            System.out.println("Undo successful: Book re-added: " + book.getTitle());
        } else {
            System.out.println("No actions to undo.");
        }
    }

    // Add a book request to the queue
    public void requestBook(String isbn, String requesterName) {
        bookRequestQueue.add(new BookRequest(isbn, requesterName));
        System.out.println("Book request added for ISBN: " + isbn + " by " + requesterName);
    }

    // Process book requests from the queue
    public void processBookRequests() {
        while (!bookRequestQueue.isEmpty()) {
            BookRequest request = bookRequestQueue.poll(); // Process next request
            System.out.println("Processing request for ISBN: " + request.getIsbn() + " by " + request.getRequesterName());
        }
    }

    // Display all books
    public void displayAllBooks() {
        if (bookList.isEmpty()) {
            System.out.println("No books in the library.");
        } else {
            System.out.println("Books in the library:");
            for (AbstractBook book : bookList) {
                book.displayBookInfo();
            }
        }
    }

    // Main method for testing the data structures
    public static void main(String[] args) {
    	
        LibraryDataStructures library = new LibraryDataStructures();

        // Create some book instances
        AbstractBook book1 = new FictionBook("The Catcher in the Rye", "232342", "Fiction");
        AbstractBook book2 = new NonFictionBook("Sapiens: A Brief History of Humankind", "432523", "Non-fiction");

        // Test List
        library.addBook(book1);
        library.addBook(book2);
        library.displayAllBooks();

        // Test Stack
        library.removeBook("232342");
        library.undoLastRemoval();

        // Test Queue
        library.requestBook("432523", "Alice");
        library.requestBook("123456", "Bob");
        library.processBookRequests();
    }
}

// Class to represent a book request (for Queue)
class BookRequest {
    private String isbn;
    private String requesterName;

    public BookRequest(String isbn, String requesterName) {
        this.isbn = isbn;
        this.requesterName = requesterName;
    }

    public String getIsbn() {
        return isbn;
    }

    public String getRequesterName() {
        return requesterName;
    }
}

// AbstractBook Class (simplified for context)
abstract class AbstractBook {
    protected String title;
    private String isbn;
    protected String genre;

    public AbstractBook(String title, String isbn, String genre) {
        this.title = title;
        this.isbn = isbn;
        this.genre = genre;
    }

    public abstract void displayBookInfo();

    public String getISBN() {
        return isbn;
    }

    public String getTitle() {
        return title;
    }
}

// FictionBook class
class FictionBook extends AbstractBook {
    public FictionBook(String title, String isbn, String genre) {
        super(title, isbn, genre);
    }

    @Override
    public void displayBookInfo() {
        System.out.println("Fiction Book: " + title + ", ISBN: " + getISBN() + ", Genre: " + genre);
    }
}

// NonFictionBook class
class NonFictionBook extends AbstractBook {
    public NonFictionBook(String title, String isbn, String genre) {
        super(title, isbn, genre);
    }

    @Override
    public void displayBookInfo() {
        System.out.println("Non-Fiction Book: " + title + ", ISBN: " + getISBN() + ", Genre: " + genre);
    }

}
