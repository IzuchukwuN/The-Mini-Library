import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

abstract class AbstractBook implements Serializable, BookOperations {

    // Class-level variable to store books
    private List<AbstractBook> books = new ArrayList<>();

    // Method to save library data
    public void saveLibraryData(String filename) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(books); // Serialize the list of books
            System.out.println("Library data saved successfully.");
        } catch (IOException e) {
            System.out.println("Error saving library data: " + e.getMessage());
        }
    }

    // Method to load library data
    @SuppressWarnings("unchecked")
    public void loadLibraryData(String filename) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            books = (List<AbstractBook>) ois.readObject(); // Deserialize the list of books
            System.out.println("Library data loaded successfully.");
        } catch (IOException e) {
            System.out.println("Error loading library data: " + e.getMessage());
        } catch (ClassNotFoundException e) {
            System.out.println("Data format error: " + e.getMessage());
        }
    }

    // Method to add a book to the library
    public boolean addBook(AbstractBook book) {
            //Checks for the isbn in the system
            if (isbnSet.contains(book.getISBN())) {
                System.out.println("This ISBN is a duplicate: " + book.getISBN());
                return false;
            }
            //Stores the book in lower case to avoid case sensitive searches
            isbnSet.add(book.getISBN());
            searchByISBN.put(book.getISBN(), book);
            searchByTitle.put(book.getTitle().toLowerCase(), book);
            System.out.println("Book added: " + book.getTitle());
            return true;
        }

    // Method to display all books
    public void displayAllBooks() {
        if (books.isEmpty()) {
            System.out.println("No books in the library.");
        } else {
            System.out.println("Books in the library:");
            for (AbstractBook book : books) {
                System.out.println(book);
            }
        }
    }
}
